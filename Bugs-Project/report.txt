Robert Griffith
304 833 256

Public Member Function Descriptions And Testing:

Actor.h
	Actor: public Graphobject
		Actor: The compiler simply calls the GraphObject compiler with the relevant arguments, and initializes a private data member that stores a pointer to the StudentWorld the Actor resides in.
		~Actor:	The destructor doesn't have any code in it, but it needs to be virtual because each child class introduces new objects that need to be destroyed.
		doSomething: This is the function that will be called by all actors during each tick of the game to decide their actions. The function is pure virtual because all actors can doSomething(), and each type of actor does something different.
		isDead: This function returns a boolean value and is used to determine whether or not an actor is dead. It's virtual because different actors respond differently, and it's default false and redefined in EnergyHolder because only an EnergyHolder can die.
		blocksMovement: This function returns a boolean value and is used to determine whether or not the actor blocks movement to its current position. It's virtual because different actors respond differently, and it's default false because only one child class (Pebble) will return true.
		getBitten: This function is called by an Actor when it is bitten by another Actor, in order to decrease its health. It's virtual because different actors respond in different ways, with most except for Insects doing nothing, so the function by default is {}.
		getPoisoned: This function is called to poison an Actor. It's virtual because different actors respond in different ways, with most except for Insects doing nothing, so the function by default is {}.
		getStunned: This function is called to stun an Actor. It's virtual because different actors respond in different ways, with most except for Insects doing nothing, so the function by default is {}.
		isEdible: This function returns a boolean value and is used to determine if the Actor is of the Food child class. It's virtual because different actors respond in different ways, with all returning false except for Food which returns true.
		isPheromone: This function returns a boolean value and is used to determine if the Actor is of the Pheromone child class. It's virtual because different actors respond in different ways, with all returning flase except for Pheromones which returns true if the colony corresponds with their IID.
		isInsect: This function returns a boolean value and is used to determine if the Actor is of the Insect child class. It's virtual because different actors respond differently, with only Insects returning true.
		isEnemy: This function returns a boolean value and is used to determine if the Actor is an enemy. The function takes an int argument 'colony' which is used to determine if the Actor is an enemy to the colony of ant which is attempting to bite an enemy or checking for an enemy ahead of it. 
			 Grasshoppers use this function as well, with a value of -1 for 'colony' so it always returns true for insects. This function is virtual because all Actors except for Insects return false.
		isDangerous: This function returns a boolean value to signal whether or not the Actor is dangerous to an ant of the passed 'colony' value. This function is virutal because different actors respond in different ways.
		isMyHill: This function returns a boolean value and is virtual because only Actors of the child class AntHill will respond true, and only then if their colony values match the passed argument 'colony'.
		getWorld: This function returns a pointer to the StudentWorld of which the actor is a member of. This is not virtual because it is functionality is universal for all actors.
		
		Testing:
		In order to thoroughly test the Actor class I constructed every type of child class using the format "Actor* a = new [ChildClass](relevantArguments);". With each class I tested each public actor function, passing working arguments in order to test the result as well as passing bad arguments that
		I knew would return errors. The bad arguments all consisted of invalid colony values, and as I expected, for the classes who's virtual forms of the arguments even utilized the colony parameter the "error" was just the argument returning false when a real colony value would have returned true. This 
		error is just a false negative, which is much better than a false positive as that could result in an error like an insect trying to bite a pheromone or a food object. I also made sure to test doSomething, even with a new Actor object (not a child class) just for the sake of testing it. When
		testing doSomething and most other functions that were not one line or nothing, I made sure to debug through them with breakpoints at each significant part.

	Pebble: public Actor
		Pebble: The compiler simply calls the Actor compiler with the relevant arguments; an IID corresponding to a Pebble, and a depth of 1.
		~Pebble: The destructor doesn't have any code in it, but it's virtual for the same reason the parent destructor was originally declared virtual.
		doSomething: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and does nothing.
		blocksMovement: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and returns true because pebbles block movement.
			
		Testing:
		There wasn't much to test for the pebble class. I started by creating two new Pebbles, one accessed by a pointer to a Pebble and the other by a pointer to an Actor. The only possible errors in construction were the passing of a bad pointer to a StudentWorld object and the passing of invalid x,y 
		coordinates. These errors are of no concern however, as no Pebble is ever created with bad arguments in my files. For both forms of properly constructed Pebbles, both doSomething and blocksMovement behaved properly, and every function worked correctly. I also ran my compiled Bugs.exe with the given
		field.txt and USCAnt.bug files. I went frame by frame for about 100 ticks carefully watching each insect's interaction with the pebbles. To be more precise, I created a new field.txt file with a thin, 1 x 62 space surrounded by rocks. I compiled with each type of insect in the box, individually and
		then together. There were no glitches through the rocks at all, and all rocks properly deconstructed.

	EnergyHolder: public Actor
		EnergyHolder: The compiler simply calls the Actor compiler with the relevent arguments, and takes a new argument 'energy' which the private member m_energy is initialized to in order to keep track of the energy the unit has.
		~EnergyHolder: The destructor doesn't have any code, it's virtual for the same reason ~Actor is virtual.
		isDead: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and now returns the boolean value corresponding to if the EnergyHolder's energy is less than or equal to zero, because that means it's dead.
		getEnergy: This is not virtual because it is only used by EnergyHolders and never redefined for a specific EnergyHolder child. It returns the current energy and is a constant function.
		updateEnergy: This is not virtual because it is never redefined by a child class, and alters the EnergyHolder's energy by the passed integer amount.
		pickupAndEatFood: This function returns the amount of food eaten in order to check if the EnergyHolder ate, and the function checks if there is food at the current location and if there is it will take the passed amount of energy from the food object and add it to it's own. If the food object has 
				   less energy then passed, the EnergyHolder will eat whatever energy the food has left.
		
		Testing:
		For EnergyHolder I made sure all child classes constructed properly, and could run all public EnergyHolder member functions. Since all the public member functions are very simple, the testing was very limitted. The only function I actually debugged through with breakpoints was pickupAndEatFood, as
		it actually has to access the Actor's StudentWorld pointer and call a StudentWorld function. Even still, the function was incredibly simple and posed no issues. I saved interaction with other EnergyHolders to the specific testing of each child class of EnergyHolder.

	Food: public EnergyHolder
		Food: The compiler calls the EnergyHolder compiler with 6000 energy, the relevant IID for food and a starting direction of right.
		~Food: The destructor is like all other destructors, for the same reasons.
		doSomething: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and it does nothing.
		isEdible: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and it returns true because it is Food.
	
		Testing:
		In order to test the Food class I tested contructing it with a pointer to EnergyHolder as well as a pointer to Actor. It all compiled well, and its virtual doSomething behaved properly. isEdible returned true for all new Food objects I had, and all EnergyHolder functions as wells as base Actor functions.
		I then made another field.txt file with one 6 space wide row surrounded by rocks where I placed two baby grasshoppers and a food pile to monitor how the Food's energy is decremented and to make sure the Food object is updated when more than one insect is eating it. I debugged through the pickupAndEatFood 
		function as well as the Food class' doSomething to see how every value was changing.

	AntHill: public EnergyHolder
		AntHill: The compiler calls the EnergyHolder compiler with 8999 energy, facing right, and with the IID of an anthill.
		~AntHill: It's the same as all the others.
		doSomething: The anthill will create a new ant at the current location with the corresponding colony number and compiler code. It needs 2000 energy to do this. It will eat any food that is on its same posisition.
		isMyHill: This function returns true if the colony parameter equals the AntHill's private colony value.
	
		Testing:
		To test this I created a field.txt file with a full row surrounded by pebbles, with one antHill and four food objects evenly spaced out. I debugged through the AntHill's doSomething function and the AntHill's isMyHill function when called by the ants as they dropped food on the hill. I debugged many times
		to ensure that the creation of ants was happening during the right ticks, just as the anthill has enough energy.

	Pheromone: public EnergyHolder
		Pheromone: The compiler calls EnergyHolder with relevant information, 256 energy, and facing right.
		~Pheromone: same as all others
		doSomething: This function decreases it's energy by 1.
		increaseStrength: This function increases it's energy by 256, to a maximum of 768.
	
		Testing:
		To test the Pheromone class I used a field.txt file of an entirely empty field surrounded by pebbles with only one anthill in it, and I changed my code so the anthill was initialized with only 2000 energy so it would only create one ant. I updated USCAnt.bug so that the ants produced pheromones, and using
		the debugger multiple times and just through observation I tested to make sure the pheromones were calling increaseStrength correctly, as well as dying at the appropriate time. Using this same configuration I ran my compiled .exe aside the sample bugs.exe provided on the class website so I could compare the 
		behavior and see if my pheromones and ants behaved strangely. For this test I changed my anthill construction to be back to the normal 8999 so I could accurately compare/observe.

	TriggerableActor: public Actor
		TriggerableActor: The compiler calls Actor with a direction of right, the relevant IID, and a depth of 2.
		~TriggerableActor: same as others
		isDangerous: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and returns true.
	
		Testing:
		In order to test this class I constructed a new TriggerableActor object with an Actor, EnergyHolder, and TriggerableActor pointers, and passed some with bad arguments just to see the error message. I then proceeded to test the properly constructed objects with both Actor, EnergyHolder, and 
		TriggerableActor class functions.  I debugged through the functions that were worth debugging through.

	WaterPool: public TriggerableActor
		WaterPool: The compiler calls TriggerableActor with the relevant information.
		~WaterPool: same as others
		doSomething: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and calls StudentWorld to stun all insects that have just occupied the same position.
	
		Testing:
		In order to test the WaterPool class I constructed new WaterPool objects using WaterPool pointers, TriggerableActor pointers, EnergyHolder pointers, and Actor pointers. I purposefully called some variations with bad arguments, just for the sake of getting the error message from doing so and seeing the
		behavior. I then debugged through the WaterPool doSomething function, and tested that all insects properly get stunned (except for AdultGrasshopper) by debugging and observing a compiled program with a field.txt of one open row surrounded by pebbles with two BabyGrasshoppers, four WaterPools and three food 
		objects (with the AdultGrasshopper specificAction function disabled) and then the same compilation with one AntHill and no food or other insects. With these two builds I was able to monitor the movements of the insects tick by tick and see if the WaterPools properly stunned them.

	Poison: public TriggerableActor
		Poison: The compiler calls TriggerableActor with it's position and IID.
		~Poison: same as others
		doSomething: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and poisons all insects in the same location.
	
		Testing:
		In order to test the Poison class I constructed new Poison objects using Poison pointers, TriggerableActor pointers, EnergyHolder pointers, and Actor pointers. I purposefully called some variations with bad arguments, just for the sake of getting the error message from doing so and seeing the
		behavior. I then debugged through the WaterPool doSomething function, and tested that all insects properly get stunned (except for AdultGrasshopper) by debugging and observing a compiled program with a field.txt of one open row surrounded by pebbles with two BabyGrasshoppers, four Poison objects and three 
		food objects (with the AdultGrasshopper specificAction function disabled) and then the same compilation with one AntHill and no food or other insects. With these two builds I was able to monitor the movements of the insects tick by tick and see if the WaterPools properly stunned them.

	Insect: public EnergyHolder
		Insect: The compiler calls EnergyHolder with a random direction and depth of 1. It also iniializes private data members to 0 and false.
		~Insect: same as others
		doSomething: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, it subtracts 1 energy.
		getBitten: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and it subtracts energy according to the amount passed to the function.
		getPoisoned: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and it subtracts 150 energy.
		getStunned: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and it will cause the insect to sleep for two ticks if it hasn't already been stunned and hasn't left it's current position.
		isEnemey: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and returns true.
		isInsect: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and returns true.
		getSleepTicks: This is not virtual because it is not redefined by child classes, and returns the private member for the number of ticks the insect will be asleep for.
		getXYInFrontOfMe: This is not virtual because it is not redefined by a child class, and will change the passed x and y int values to the position in front of the insect.
		moveForwardIfPossible: This is not virtual because it is not redefined by a child class, and it moves the insect forward if there is no pebble there.
		updateSleepTicks: This is not virtual because it is not redefined by a child class, and it updates the sleep ticks private data member by the passed amount.
		checkHasMoved: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and returns the private data member m_moved.
		registerMove: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and sets it so the insect has moved. m_moved = true.
		clearMove: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and sets m_moved to false.
		
		Testing:
		In order to test this class I constructed a new Insect object with an Actor, EnergyHolder, and Insect pointers, and passed some with bad arguments just to see the error message. I then proceeded to test the properly constructed objects with both Actor, EnergyHolder, and Insect class functions.  I debugged 
		through the functions that were worth debugging through, and passed bad arguments to some to make sure they would return proper values, even though they would never be called with bad arguments. 


	Ant: public Insect
		Ant: The compiler calls the Insect compiler with the relevant information, with an energy of 1500, and initializes its private data members to 0 and false.
		~Ant: same as others
		doSomething: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style. The function fetches a command corresponding to the position indicated and updated by it's private member m_instructionCount.
			     If there is an error the ant dies, if not it gets its x and y coordinates and proceeds to execute the command given by the opcode of the command previously fetched. It repeats this process until it executes a command or has repeated 10 times.
		getBitten: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and decreases the Ant's energy by the damage passed to the function, and also sets it's private m_prevBitten member to true.
		isEnemey: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and returns if the passed colony value equals the Ant's private colony value.
		pickupFood: This is not virtual because it is never redefined by a child class, and it checks for food on square and pickups the amount passed to the funtion or the amount of energy left in the food, whichever is smaller. The energy is subtracted 
			    from the food and added to the Ant's private data member of held energy.
		
		Testing:
		By this point the ants have been generally well tested as far as general functionality goes, but the actual Ant member functions haven't been debugged through with breakpoints, checking each value. I did this, as well as making sure new Ants constructed with Ant, Insect, EnergyHolder, and Actor pointers,
		while also constructing Ants with bad arguments. I created multiple field.txt scenarios, debugging through the Ants interaction with Pheromones, BabyGrasshoppers, Food, Poison, WaterPools, all AntHills, other Ants, Pebbles, and AdultGrasshoppers. For this I chose to use my updated version of the original
		USCAnt.bug file, as I tested all possible opcode commands, if statements, and wanted to see the Ants' interaction with Pheromone objects. 
		
	Grasshopper: public Insect
		Grasshopper: The compiler calls the Insect compiler with the relevant information, and the Grasshopper is given a random walk distance from 2 to 10.
		~Grasshopper: same as others
		doSomething: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and calls Insect::doSomething, sleeps if it's asleep, and if not does a specific action specified by BabyGrasshopper or AdultGrasshopper.
			     If this specific action didn't happen, the grasshopper tries to pickup 200 units of food with a 50% probability. If this is unsuccessful, the grasshopper moves or sets a new walkdistance and random direction if it is done walking. After all this,
			      the grasshopper's sleep ticks are updated by 2.
		specificAction: This is pure virtual so Baby and Adult grasshoppers can specify what they do during a tick that is different, but not enough code to warrant a new doSomething.
		
		Testing:
		In order to test this class I constructed a new Grasshopper object with an Actor, EnergyHolder, Insect, and Grasshopper pointers, and passed some with bad arguments just to see the error message. I then proceeded to test the properly constructed objects with both Actor, EnergyHolder, Insect, and Grasshopper
		class functions.  I debugged through the functions that were worth debugging through, and passed bad arguments to some to make sure they would return proper values, even though they would never be called with bad arguments. I ensured that doSomething was pure virtual by trying to call it with a GrassHopper object.

	BabyGrasshopper: public Grasshopper
		BabyGrasshopper: The compiler calls its parent compiler with the relevant information, 500 energy and an IID for a babygrasshopper.
		~BabyGrasshopper: same as others
		specificAction: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and the baby checks if it has over 1600 energy and if it does it dies but creates a new Adult grasshopper in its place and returns true (otherwise false).
		
		Testing:
		By this point the BabyGrasshoppers have been generally well tested, but I still debugged through their specificAction process of creating new AdultGrasshoppers with the correct arguments. I again, in a similar manner as all other classes, made sure that BabyGrasshopper objects can be newly constructed pointers
		to its parent classes, all the way up to Actor (I felt GraphicObject was excessive, as I never make that call anywhere in my code). I made various arrangements of field.txt files with one row enclosed and tested how BabyGrasshoppers interact with WaterPools, Poison, Food, Pebbles, other BabyGrasshoppers, Ants,
		and some AdultGrasshoppers (with the jumping portion of their specificAction function disabled).

	AdultGrasshopper: public Grasshopper
		AdultGrasshopper: The compiler calls its parent compiler with the relevant information, 1600 health and an adult grashopper IID.
		~AdultGrasshopper: same as others
		specificAction: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and returns true if the grasshopper bites an enemy (1 in 3 chance) or jumps to a random available location in a 10 unit radius.
		getBitten: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and is the same but the grasshopper has a 50% chance to bite back with 50 damage.
		getStunned: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and does nothing because adult grasshoppers can't be stunned.
		getPoisoned: This was already declared virtual by the parent class, it is marked virtual for the sake of coding style, and does nothing because adult grasshoppers can't be poisoned.

		Testing:
		By this point the AdultGrasshoppers have been generally well tested with the exception of their jumping capability, so I debugged through their specificAction process of biting other insects as well as their jumping process. I again, in a similar manner as all other classes, made sure that BabyGrasshopper objects can be newly constructed pointers
		to its parent classes, all the way up to Actor (I felt GraphicObject was excessive, as I never make that call anywhere in my code). I made various arrangements of field.txt files with one row enclosed and tested how BabyGrasshoppers interact with WaterPools, Poison, Food, Pebbles, BabyGrasshoppers, Ants, and some AdultGrasshoppers (with the jumping 
		portion of their specificAction function disabled). I then tested and debugged through their jumping capabilities in a fully open field.txt with plenty of food to speed up the process of BabyGrasshoppers becoming AdultGrasshoppers. 


StudentWorld.h
	StudentWorld: public GameWorld 
		StudentWorld: The compiler calls its parent compiler with the relevant information, and initializes the tickCount to 2000.
		~StudentWorld: The destructor calls the cleanUp function, and is virtual for the same reason the Actor destructor is virtual.
		init: This is virtual because it is already declared virtual in GameWorld, and we want StudentWorld's init to be called. It initializes the field and all the actors in it. It gets the .bug files and goes through every point in the field, constructing the relevant actor. Anthills will be constructed with the Compiler class pointers taken from the .bug files.
		move: This is virtual because it is already declared virtual in GameWorld, and we want StudentWorld's move to be called.This function increases the tick count, makes all actors 'doSomething' for this tick, destroys all dead actors after, and then updates the display text. If the ticks reach zero the function signals the game to end and display the winning ant colony name.
		cleanUp: This is virtual because it is already declared virtual in GameWorld, and we want StudentWorld's cleanUp to be called. This function destroys all actor objects left after the game has ended, as well as the dynamically allocated Compiler objects stored in a private vector.
		setCurrentWinner: This is not virtual because it is never redefined by a child class. This function updates the private member in StudentWorld that keeps track of the ant colony that has currently produced the most ants at the earliest point.
		setDisplayText: This is not virtual because it is never redefined by a child class and has not been defined by the parent class (at all or as virtual). The function updates and sets the display text for the game in accordance to the progress made in the last tick.
		canMoveTo: This is not virtual because it is never redefined by a child class. This function returns false if there is a pebble in the passed x,y point in the array or if the x,y point does not exist in the array. Otherwise it returns true.
		addActor: This is not virtual because it is never redefined by a child class. This function adds an passed Actor to the StudentWorld so it can interact with other actors and be displayed.
		addFood: This is not virtual because it is never redefined by a child class. This function adds food of the passed amount to the passed x,y point in the field. If there is no food already there it creates a food actor and if there is preexisting food it adds energy to that actor.
		getEdibleAt: This is not virtual because it is never redefined by a child class. This function returns a pointer to a food actor at the passed point, or a nullptr if there isn't one.
		getPheromonesAt: This is not virtual because it is never redefined by a child class. This function returns a pointer to a Pheromone of the passed colony at the passed point, or a nullptr if there isn't one.
		isEnemeyAt: This is not virtual because it is never redefined by a child class, and returns true if there is an enemy to the passed colony at the passed point. Otherwise it returns false.
		isDangerAt: This is not virtual because it is never redefined by a child class, and returns true if there is any danger to the passed colony at the passed point. Otherwise return false.
		isAntHillAt: This is not virtual because it is never redefined by a child class, and returns true if there is an an AntHill belonging to the passed colony at the passed point. Otherwise return false.
		biteEnemyAt: This is not virtual because it is never redefined by a child class, and returns true if there was an enemy to the passed colony at the passed point and the actor deals bite damage to that actor.
		poisonAllPoinableAt: This is not virtual because it is never redefined by a child calss, and poisons all poisonable actors at the passed point.
		stunAllStunnableAt: This is not virtual because it is never redefined by a child class, and stuns all stunnable actors at the passed point.
		increaseScore: This is not virtual because it is never redefined by a child class, and increments the score of the passed colony by 1 point.

		Testing:
		In order to test this class I essentially tested all the classes in Actor.h, as all those classes relied heavily on the functions kept here. When I would test those functions I debugged through all the relevant functions called in StudentWorld.h as well as observing general major functionality of each class and program. init, move, cleanUp, setCurrentWinner, and setDisplayText
		were thoroughly debugged through, to make sure all values were correct and that the functions behaved properly. I passed Bugs.exe bad field.txt files, no .bugs files, more than four .bugs files, field.txt files with a varying number of anthills in an ascending combination (if there are 3 AntHills, its anthill0 anthill1 and anthill2) and less than 4 .bug files and made sure the 
		program still compiled and displayed text correctly. I did extensive testing for memory leaks by debugging and using the CRT Library in Microsoft Visual Studio.
	

Failed Functionality:
	As far as I know, I did not fail to implement any functionality.

Assumptions:
	I assumed that when the Bugs.exe is called with an operable field.txt but no .bugs files following, it would be best for the program to still run but with no ants in the simulation. I also assumed that if the program is given more than four .bugs files, it should use the first four, and if the field.txt file has less than four different
	AntHill types, those AntHill types will be consecutive list starting at anthill0 (e.g. if there are two anthill types they will be anthill0 and anthill1, and if there are three anthill types they will be anthill0, anthill1 and anthill2). 
